#!/usr/bin/env bash
# run-synthesis.sh: synthesize Verilog design with Yosys and a specified Liberty library

set -euo pipefail

# Default paths and parameters
RTL_DIR="./rtl"
LIB_FILE="./rtl/synth/sky130_fd_sc_hd__tt_025C_1v80.lib"
OUT_DIR="./synth-run"
LOG_DIR="./synth-logs"
TOP_MODULE="aes"
CLOCK_PERIOD_PS="1000"

usage() {
  cat <<EOF
Usage: $0 [-h] [-d rtl_dir] [-i mod1,mod2,...] [-l liberty_file] [-o out_dir] [-L log_dir] [-m top_module] [-c clock_ps]

Options:
  -h               Show this help message and exit
  -d <rtl_dir>     Directory containing input RTL (.v) files (default: ./rtl)
  -i <mods>        Comma-separated list of RTL basenames (without .v) to synthesize (default: all .v in rtl_dir)
  -l <liberty>     Path to Liberty (.lib) file (default: $LIB_FILE)
  -o <out_dir>     Directory for generated netlist/JSON (default: $OUT_DIR)
  -L <log_dir>     Directory for synthesis logs (default: $LOG_DIR)
  -m <top>         Top-level module name (default: $TOP_MODULE)
  -c <clock_ps>    Target clock period in picoseconds (default: $CLOCK_PERIOD_PS)
EOF
  exit 1
}

# Parse flags
mods_spec=""
while getopts ":hd:i:l:o:L:m:c:" opt; do
  case "$opt" in
    h) usage ;;
    d) RTL_DIR="$OPTARG" ;;
    i) mods_spec="$OPTARG" ;;
    l) LIB_FILE="$OPTARG" ;;
    o) OUT_DIR="$OPTARG" ;;
    L) LOG_DIR="$OPTARG" ;;
    m) TOP_MODULE="$OPTARG" ;;
    c) CLOCK_PERIOD_PS="$OPTARG" ;;
    *) usage ;;
  esac

done
shift $((OPTIND -1))

# Prepare RTL file list
declare -a rtl_sources
if [[ -n "$mods_spec" ]]; then
  IFS=',' read -ra names <<< "$mods_spec"
  for name in "${names[@]}"; do
    file="$RTL_DIR/${name%.v}.v"
    if [[ ! -f "$file" ]]; then
      echo "Error: RTL file '$file' not found." >&2
      exit 1
    fi
    rtl_sources+=("$file")
  done
else
  # all .v files in directory
  rtl_sources=("$RTL_DIR"/*.v)
fi

# Verify Liberty file exists
if [[ ! -f "$LIB_FILE" ]]; then
  echo "Error: Liberty file '$LIB_FILE' not found." >&2
  exit 1
fi

# Create output and log dirs
mkdir -p "$OUT_DIR" "$LOG_DIR"

# Create temporary Yosys script
ys_script=$(mktemp /tmp/yosys_synth_XXXX.ys)
trap 'rm -f "$ys_script"' EXIT

cat > "$ys_script" <<EOF
# Auto-generated by run_synthesis.sh
# 1. Read design
read_verilog ${rtl_sources[*]}
# 2. Read Liberty
read_liberty -lib $LIB_FILE
# 3. Elaborate, flatten
hierarchy -check -top $TOP_MODULE
proc; opt
flatten
# 4. Handle memories, techmap
memory; opt
techmap; opt
# 5. Map FFs
dfflibmap -liberty $LIB_FILE
# 6. Map logic and target clock
abc -liberty $LIB_FILE -D $CLOCK_PERIOD_PS
# 7. Report area
stat -liberty $LIB_FILE
# 8. Write outputs
write_verilog $OUT_DIR/${TOP_MODULE}_synth.v
write_json    $OUT_DIR/${TOP_MODULE}_synth.json
EOF

# Run Yosys and log output
echo "Running synthesis for top '$TOP_MODULE'..."
yosys -s "$ys_script" > "$LOG_DIR/${TOP_MODULE}_synth.log" 2>&1
if [[ $? -eq 0 ]]; then
  echo "[SUCCESS] Synthesis complete"
  echo "Netlist: $OUT_DIR/${TOP_MODULE}_synth.v"
  echo "JSON:    $OUT_DIR/${TOP_MODULE}_synth.json"
  echo "Log:     $LOG_DIR/${TOP_MODULE}_synth.log"
else
  echo "[FAIL] Synthesis failed (see log: $LOG_DIR/${TOP_MODULE}_synth.log)" >&2
  exit 1
fi

